#!/usr/bin/env python3
# Copyright 2021 Camptocamp SA
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl)

from collections import namedtuple
import sys

# use GitPython
import git


AUTHOR_EMAILS_TO_SKIP = [
    "transbot@odoo-community.org",
    "oca-git-bot@odoo-community.org",
    "oca+oca-travis@odoo-community.org",
]

SUMMARY_TERMS_TO_SKIP = [
    "Translated using Weblate",
    "Added translation using Weblate",
    "Merge pull request",
]

Commit = namedtuple("Commit", "author_name author_email authored_datetime summary message")


def confirm(text):
    res = input(text + " ")
    return res.lower()[0] == "y" if res else False


class BranchesDiff():
    def __init__(self, repo, module, ref1, ref2):
        repo = git.Repo(repo)
        self.ref1, self.ref2 = ref1, ref2
        self.ref1_commits = self._get_commits(repo.iter_commits(ref1, paths=module))
        self.ref2_commits = self._get_commits(repo.iter_commits(ref2, paths=module))

    def print_commits_to_port(self):
        commits_to_port = self.get_commits_to_port()
        print(f"{len(commits_to_port)} commits to port from {self.ref1} to {self.ref2}\n")
        for commit in commits_to_port:
            print(f"{self.ref1_commits[commit]} {commit.summary}")

    def get_commits_to_port(self):
        return [x for x in self.ref1_commits if x not in self.ref2_commits]

    def _get_commits(self, commits):
        """Filter out undesirable commits and return a dict `{Commit: SHA, ...}`."""
        # Dict keys preserves the order of commits
        commits_dict = {}
        for commit in commits:
            if commit.author.email in AUTHOR_EMAILS_TO_SKIP:
                continue
            if any([term in commit.summary for term in SUMMARY_TERMS_TO_SKIP]):
                continue
            com = Commit(
                author_name=commit.author.name,
                author_email=commit.author.email,
                authored_datetime=commit.authored_datetime,
                summary=commit.summary,
                message=commit.message,
            )
            commits_dict[com] = commit.hexsha
        return commits_dict

if __name__ == "__main__":
    repo = sys.argv[1]
    module = sys.argv[2]
    ref1 = sys.argv[3]
    ref2 = sys.argv[4]
    diff = BranchesDiff(repo, module, ref1, ref2)
    diff.print_commits_to_port()
